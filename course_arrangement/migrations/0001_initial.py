# Generated by Django 2.0.5 on 2018-06-16 13:59

import course_arrangement.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.IntegerField()),
                ('slot', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('capacity', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='ClassRoom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity', models.IntegerField()),
                ('college', models.CharField(max_length=255)),
                ('floor', models.IntegerField()),
                ('identifier', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='ClassRoomCollegeChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(choices=[(10, 'HARD_ACCEPT'), (5, 'SOFT_ACCEPT_5'), (4, 'SOFT_ACCEPT_4'), (3, 'SOFT_ACCEPT_3'), (2, 'SOFT_ACCEPT_2'), (1, 'SOFT_ACCEPT_1'), (0, 'SOFT_MEDIOCRE'), (-1, 'SOFT_REJECT_1'), (-2, 'SOFT_REJECT_2'), (-3, 'SOFT_REJECT_3'), (-4, 'SOFT_REJECT_4'), (-5, 'SOFT_REJECT_5'), (-10, 'HARD_REJECT')], default=0, help_text='preference certain college')),
                ('refer_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='course_arrangement.ClassRoom')),
            ],
        ),
        migrations.CreateModel(
            name='ClassRoomFloorChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(choices=[(10, 'HARD_ACCEPT'), (5, 'SOFT_ACCEPT_5'), (4, 'SOFT_ACCEPT_4'), (3, 'SOFT_ACCEPT_3'), (2, 'SOFT_ACCEPT_2'), (1, 'SOFT_ACCEPT_1'), (0, 'SOFT_MEDIOCRE'), (-1, 'SOFT_REJECT_1'), (-2, 'SOFT_REJECT_2'), (-3, 'SOFT_REJECT_3'), (-4, 'SOFT_REJECT_4'), (-5, 'SOFT_REJECT_5'), (-10, 'HARD_REJECT')], default=0, help_text='preference certain floor')),
                ('refer_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='course_arrangement.ClassRoom')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('start_week', models.IntegerField(validators=[course_arrangement.models.validate_week])),
                ('end_week', models.IntegerField(validators=[course_arrangement.models.validate_week])),
                ('slots_per_week', models.IntegerField(default=1)),
                ('max_slots_per_day', models.IntegerField(default=2, help_text='max time slots every day')),
                ('day1', models.IntegerField(choices=[(10, 'HARD_ACCEPT'), (5, 'SOFT_ACCEPT_5'), (4, 'SOFT_ACCEPT_4'), (3, 'SOFT_ACCEPT_3'), (2, 'SOFT_ACCEPT_2'), (1, 'SOFT_ACCEPT_1'), (0, 'SOFT_MEDIOCRE'), (-1, 'SOFT_REJECT_1'), (-2, 'SOFT_REJECT_2'), (-3, 'SOFT_REJECT_3'), (-4, 'SOFT_REJECT_4'), (-5, 'SOFT_REJECT_5'), (-10, 'HARD_REJECT')], default=0, help_text='preference of Monday')),
                ('day2', models.IntegerField(choices=[(10, 'HARD_ACCEPT'), (5, 'SOFT_ACCEPT_5'), (4, 'SOFT_ACCEPT_4'), (3, 'SOFT_ACCEPT_3'), (2, 'SOFT_ACCEPT_2'), (1, 'SOFT_ACCEPT_1'), (0, 'SOFT_MEDIOCRE'), (-1, 'SOFT_REJECT_1'), (-2, 'SOFT_REJECT_2'), (-3, 'SOFT_REJECT_3'), (-4, 'SOFT_REJECT_4'), (-5, 'SOFT_REJECT_5'), (-10, 'HARD_REJECT')], default=0, help_text='preference of Tuesday')),
                ('day3', models.IntegerField(choices=[(10, 'HARD_ACCEPT'), (5, 'SOFT_ACCEPT_5'), (4, 'SOFT_ACCEPT_4'), (3, 'SOFT_ACCEPT_3'), (2, 'SOFT_ACCEPT_2'), (1, 'SOFT_ACCEPT_1'), (0, 'SOFT_MEDIOCRE'), (-1, 'SOFT_REJECT_1'), (-2, 'SOFT_REJECT_2'), (-3, 'SOFT_REJECT_3'), (-4, 'SOFT_REJECT_4'), (-5, 'SOFT_REJECT_5'), (-10, 'HARD_REJECT')], default=0, help_text='preference of Wednesday')),
                ('day4', models.IntegerField(choices=[(10, 'HARD_ACCEPT'), (5, 'SOFT_ACCEPT_5'), (4, 'SOFT_ACCEPT_4'), (3, 'SOFT_ACCEPT_3'), (2, 'SOFT_ACCEPT_2'), (1, 'SOFT_ACCEPT_1'), (0, 'SOFT_MEDIOCRE'), (-1, 'SOFT_REJECT_1'), (-2, 'SOFT_REJECT_2'), (-3, 'SOFT_REJECT_3'), (-4, 'SOFT_REJECT_4'), (-5, 'SOFT_REJECT_5'), (-10, 'HARD_REJECT')], default=0, help_text='preference of Thursday')),
                ('day5', models.IntegerField(choices=[(10, 'HARD_ACCEPT'), (5, 'SOFT_ACCEPT_5'), (4, 'SOFT_ACCEPT_4'), (3, 'SOFT_ACCEPT_3'), (2, 'SOFT_ACCEPT_2'), (1, 'SOFT_ACCEPT_1'), (0, 'SOFT_MEDIOCRE'), (-1, 'SOFT_REJECT_1'), (-2, 'SOFT_REJECT_2'), (-3, 'SOFT_REJECT_3'), (-4, 'SOFT_REJECT_4'), (-5, 'SOFT_REJECT_5'), (-10, 'HARD_REJECT')], default=0, help_text='preference of Friday')),
                ('time_slot1', models.IntegerField(choices=[(10, 'HARD_ACCEPT'), (5, 'SOFT_ACCEPT_5'), (4, 'SOFT_ACCEPT_4'), (3, 'SOFT_ACCEPT_3'), (2, 'SOFT_ACCEPT_2'), (1, 'SOFT_ACCEPT_1'), (0, 'SOFT_MEDIOCRE'), (-1, 'SOFT_REJECT_1'), (-2, 'SOFT_REJECT_2'), (-3, 'SOFT_REJECT_3'), (-4, 'SOFT_REJECT_4'), (-5, 'SOFT_REJECT_5'), (-10, 'HARD_REJECT')], default=0, help_text='preference of time slot 1')),
                ('time_slot2', models.IntegerField(choices=[(10, 'HARD_ACCEPT'), (5, 'SOFT_ACCEPT_5'), (4, 'SOFT_ACCEPT_4'), (3, 'SOFT_ACCEPT_3'), (2, 'SOFT_ACCEPT_2'), (1, 'SOFT_ACCEPT_1'), (0, 'SOFT_MEDIOCRE'), (-1, 'SOFT_REJECT_1'), (-2, 'SOFT_REJECT_2'), (-3, 'SOFT_REJECT_3'), (-4, 'SOFT_REJECT_4'), (-5, 'SOFT_REJECT_5'), (-10, 'HARD_REJECT')], default=0, help_text='preference of time slot 2')),
                ('time_slot3', models.IntegerField(choices=[(10, 'HARD_ACCEPT'), (5, 'SOFT_ACCEPT_5'), (4, 'SOFT_ACCEPT_4'), (3, 'SOFT_ACCEPT_3'), (2, 'SOFT_ACCEPT_2'), (1, 'SOFT_ACCEPT_1'), (0, 'SOFT_MEDIOCRE'), (-1, 'SOFT_REJECT_1'), (-2, 'SOFT_REJECT_2'), (-3, 'SOFT_REJECT_3'), (-4, 'SOFT_REJECT_4'), (-5, 'SOFT_REJECT_5'), (-10, 'HARD_REJECT')], default=0, help_text='preference of time slot 3')),
                ('time_slot4', models.IntegerField(choices=[(10, 'HARD_ACCEPT'), (5, 'SOFT_ACCEPT_5'), (4, 'SOFT_ACCEPT_4'), (3, 'SOFT_ACCEPT_3'), (2, 'SOFT_ACCEPT_2'), (1, 'SOFT_ACCEPT_1'), (0, 'SOFT_MEDIOCRE'), (-1, 'SOFT_REJECT_1'), (-2, 'SOFT_REJECT_2'), (-3, 'SOFT_REJECT_3'), (-4, 'SOFT_REJECT_4'), (-5, 'SOFT_REJECT_5'), (-10, 'HARD_REJECT')], default=0, help_text='preference of time slot 4')),
                ('time_slot5', models.IntegerField(choices=[(10, 'HARD_ACCEPT'), (5, 'SOFT_ACCEPT_5'), (4, 'SOFT_ACCEPT_4'), (3, 'SOFT_ACCEPT_3'), (2, 'SOFT_ACCEPT_2'), (1, 'SOFT_ACCEPT_1'), (0, 'SOFT_MEDIOCRE'), (-1, 'SOFT_REJECT_1'), (-2, 'SOFT_REJECT_2'), (-3, 'SOFT_REJECT_3'), (-4, 'SOFT_REJECT_4'), (-5, 'SOFT_REJECT_5'), (-10, 'HARD_REJECT')], default=0, help_text='preference of time slot 5')),
                ('is_lab', models.BooleanField(default=False)),
                ('classes', models.ManyToManyField(to='course_arrangement.Class')),
                ('college_preference', models.ManyToManyField(blank=True, to='course_arrangement.ClassRoomCollegeChoice')),
                ('floor_preference', models.ManyToManyField(blank=True, to='course_arrangement.ClassRoomFloorChoice')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, validators=[course_arrangement.models.validate_teacher])),
            ],
            options={
                'ordering': ['is_lab'],
            },
        ),
        migrations.AddField(
            model_name='assignment',
            name='classroom',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='course_arrangement.ClassRoom'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='course_arrangement.Course'),
        ),
    ]
